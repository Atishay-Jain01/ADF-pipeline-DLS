{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF0205sql"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ProductsTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksDb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ProductCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ThumbNailPhoto",
						"type": "varbinary"
					},
					{
						"name": "ThumbnailPhotoFileName",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Product"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TripAggregateCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobTripDataFare",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "TripData.csv",
						"container": "tripdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TripDataDLS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DLSTripData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "TripData.csv",
						"fileSystem": "tripdatacontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFTripData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TripDataDLS",
								"type": "DatasetReference"
							},
							"name": "TripDataCSV"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableTripData",
								"type": "DatasetReference"
							},
							"name": "TripFaresTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TripAggregateCSV",
								"type": "DatasetReference"
							},
							"name": "TripAggSink"
						}
					],
					"transformations": [
						{
							"name": "InnerJoinTripFare"
						},
						{
							"name": "AggregateByPaymentType"
						}
					],
					"scriptLines": [
						"source(output(",
						"          medallion as string,",
						"          hack_license as string,",
						"          vendor_id as string,",
						"          rate_code as short,",
						"          store_and_fwd_flag as boolean,",
						"          pickup_datetime as timestamp,",
						"          dropoff_datetime as timestamp,",
						"          passenger_count as short,",
						"          trip_time_in_secs as short,",
						"          trip_distance as double,",
						"          pickup_longitude as double,",
						"          pickup_latitude as double,",
						"          dropoff_longitude as double,",
						"          dropoff_latitude as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TripDataCSV",
						"source(output(",
						"          medallion as string,",
						"          hack_license as string,",
						"          vendor_id as string,",
						"          pickup_datetime as timestamp,",
						"          payment_type as string,",
						"          fare_amount as string,",
						"          surcharge as string,",
						"          mta_tax as string,",
						"          tip_amount as string,",
						"          tolls_amount as string,",
						"          total_amount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TripFaresTable",
						"TripDataCSV, TripFaresTable join(TripDataCSV@medallion == TripFaresTable@medallion",
						"     && TripDataCSV@hack_license == TripFaresTable@hack_license",
						"     && TripDataCSV@vendor_id == TripFaresTable@vendor_id",
						"     && TripDataCSV@pickup_datetime == TripFaresTable@pickup_datetime,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> InnerJoinTripFare",
						"InnerJoinTripFare aggregate(groupBy(payment_type),",
						"     Average_fair = avg(toInteger(total_amount)),",
						"          Total_trp_dist = sum(trip_distance)) ~> AggregateByPaymentType",
						"AggregateByPaymentType sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TripAggSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TripDataDLS')]",
				"[concat(variables('factoryId'), '/datasets/TripAggregateCSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flipkartdataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "FlipkartDataset",
								"type": "DatasetReference"
							},
							"name": "Flipkartsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DestinationParquet",
								"type": "DatasetReference"
							},
							"name": "Sink"
						}
					],
					"transformations": [
						{
							"name": "FilterReviewRating"
						},
						{
							"name": "PositiveReview"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          title as string,",
						"          Rating as string,",
						"          maincateg as string,",
						"          platform as string,",
						"          actprice1 as string,",
						"          norating1 as string,",
						"          noreviews1 as string,",
						"          star_5f as string,",
						"          star_4f as string,",
						"          star_3f as string,",
						"          star_2f as string,",
						"          star_1f as string,",
						"          fulfilled1 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Flipkartsource",
						"Flipkartsource filter(toInteger(norating1) < 10 || (toInteger(noreviews1) < 10)) ~> FilterReviewRating",
						"FilterReviewRating derive(Positive_review_ratio = toInteger(star_5f) / toInteger(norating1),",
						"          Total_stars = toInteger(star_1f) + toInteger(star_2f) + toInteger(star_3f) + toInteger(star_4f) + toInteger(star_5f)) ~> PositiveReview",
						"PositiveReview sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Sink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesFlow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDbDataset",
								"type": "DatasetReference"
							},
							"name": "MoviesDb"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesSink",
								"type": "DatasetReference"
							},
							"name": "Sink"
						}
					],
					"transformations": [
						{
							"name": "FilterYears"
						},
						{
							"name": "AggregateComedyRating"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as string,",
						"          Rating as string,",
						"          {Rotton Tomato} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MoviesDb",
						"MoviesDb filter(toInteger(year) >= 1910 && toInteger(year) <= 2000 && rlike(genres, 'Comedy')) ~> FilterYears",
						"FilterYears aggregate(groupBy(year),",
						"     AverageComedyRating = avg(toInteger(Rating))) ~> AggregateComedyRating",
						"AggregateComedyRating sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as string,",
						"          Rating as string,",
						"          {Rotton Tomato} as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Sink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignment-movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MoviesDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoviesFlow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDb": {},
									"Sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MoviesFlow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FlipkartPL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FlipkartDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Flipkartdataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Flipkartsource": {},
									"Sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Flipkartdataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TripDataPL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyTripData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTableTripData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TripDataDLS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TripDataAggregate",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CopyTripData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFTripData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TripDataCSV": {},
									"TripFaresTable": {},
									"TripAggSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-05-02T05:16:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TripDataDLS')]",
				"[concat(variables('factoryId'), '/dataflows/DFTripData')]"
			]
		}
	]
}